// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go

// Package activation is a generated GoMock package.
package activation

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockActivation is a mock of Activation interface.
type MockActivation struct {
	ctrl     *gomock.Controller
	recorder *MockActivationMockRecorder
}

// MockActivationMockRecorder is the mock recorder for MockActivation.
type MockActivationMockRecorder struct {
	mock *MockActivation
}

// NewMockActivation creates a new mock instance.
func NewMockActivation(ctrl *gomock.Controller) *MockActivation {
	mock := &MockActivation{ctrl: ctrl}
	mock.recorder = &MockActivationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockActivation) EXPECT() *MockActivationMockRecorder {
	return m.recorder
}

// Backward mocks base method.
func (m *MockActivation) Backward(v float64) float64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Backward", v)
	ret0, _ := ret[0].(float64)
	return ret0
}

// Backward indicates an expected call of Backward.
func (mr *MockActivationMockRecorder) Backward(v interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Backward", reflect.TypeOf((*MockActivation)(nil).Backward), v)
}

// Forward mocks base method.
func (m *MockActivation) Forward(v float64) float64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Forward", v)
	ret0, _ := ret[0].(float64)
	return ret0
}

// Forward indicates an expected call of Forward.
func (mr *MockActivationMockRecorder) Forward(v interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Forward", reflect.TypeOf((*MockActivation)(nil).Forward), v)
}
